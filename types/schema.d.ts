/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/categories/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return information about a specific category. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Get information about a single category by name or ID */
                    category: "art_of_war" | "books_and_songs" | "characters" | "characters_inquisition" | "controls" | "crafting_materials" | "creatures" | "culture_and_history" | "groups" | "history" | "items" | "letters_and_notes" | "lore" | "magic" | "magic_and_religion" | "maps" | "notes" | "places" | "quest_related" | "spell_combinations" | "tales" | "tutorials" | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The name and ID of the specified category. Can be used with /v1/categories/{category}, or can be used with /v1/entries?category=[name | id]} to specify a list of categories to filter by. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a list of categories and their corresponding IDs. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of categories and their IDs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            category?: string;
                            /** @description The ID of the category that can be used with the /entries endpoint to specify a list of categories to filter by. */
                            id?: number;
                        }[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns all codex entries that match filters if applicable.
         * @description Valid filters are sortBy=[title | id], category=A list of valid categories, comma separated. See /v1/categories for a list of categories by name, and by ID.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Property to sort by, can be the category, game, or id of an entry. Default sort is by entry title, ascending. Use -{category_name} use -{property} to sort in descending order. */
                    sortBy?: string;
                    categories?: (string | number)[];
                    games?: number[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of codex entries with the specified filters. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CodexEntry"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        EntryGameInfo: {
            dlc?: ("Trespasser" | "The Black Emporium (DA2 DLC)" | "Witch Hunt" | "Legacy" | "The Exiled Prince" | "Mage Item Pack" | "Warden's Keep" | "The Golems of Amgarrak" | "The Darkspawn Chronicles" | "Feastday Gifts and Pranks" | "Return to Ostagar" | "Rogue Item Pack" | "Mage Item Pack II" | "The Golems of Amgarrak" | "Warrior Item Pack II" | "The Stone Prisoner" | "Mark of the Assassin" | "Warrior Item Pack" | "The Descent" | "The Black Emporium (Inquisition DLC)" | "Jaws of Hakkon" | "Rogue Item Pack II")[];
            image?: string | null;
            category?: string;
            location?: string;
        };
        CodexEntry: {
            /** @description The ID of the codex entry. */
            id?: number;
            /** @description The title of the codex entry. */
            title?: string;
            /** @description The content of the codex entry. */
            content?: string;
            /** @description A list of games in which the entry appears. */
            appearances?: ("Dragon Age: Origins" | "Dragon Age 2" | "Dragon Age: Inquisition")[];
            dao?: components["schemas"]["EntryGameInfo"] | unknown;
            da2?: components["schemas"]["EntryGameInfo"] | unknown;
            dai?: components["schemas"]["EntryGameInfo"] | unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
